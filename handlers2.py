from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import SUPERGROUP_ID
from datetime import datetime, timedelta
import random
import string
import sqlite3
import re
from dateutil.relativedelta import relativedelta

GET_ABONEMENT, GET_NAME, GET_PHONE, GET_PREFER_CONTACT = range(4)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('abonements.db')
    conn.row_factory = sqlite3.Row  # –ß—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
    return conn

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_abonement(abonement_id, user_id, username, name, phone, abonement, status):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO abonements (id, user_id, username, name, phone, abonement, status)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (abonement_id, user_id, username, name, phone, abonement, status))
    conn.commit()
    conn.close()

def update_abonement_status(abonement_id, new_status):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE abonements SET status = ? WHERE id = ?
    ''', (new_status, abonement_id))
    conn.commit()
    conn.close()

def get_abonement_by_id(abonement_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM abonements WHERE id = ?', (abonement_id,))
    abonement = cursor.fetchone()
    conn.close()
    return abonement

def get_abonements_by_status(status):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM abonements WHERE status = ?', (status,))
    abonements = cursor.fetchall()
    conn.close()
    return abonements

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
def delete_old_past_abonements():
    conn = get_db_connection()
    cursor = conn.cursor()
    one_week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    print(f"Deleting abonements with status 'past' and end_date < {one_week_ago}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    cursor.execute('SELECT COUNT(*) FROM abonements WHERE status = "past" AND end_date < ?', (one_week_ago,))
    count = cursor.fetchone()[0]
    print(f"Found {count} abonements to delete")

    # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    cursor.execute('''
        DELETE FROM abonements
        WHERE status = 'past' AND end_date < ?
    ''', (one_week_ago,))

    print(f"Deleted {cursor.rowcount} abonements")

    conn.commit()
    conn.close()

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
async def periodic_delete_old_abonements(context: ContextTypes.DEFAULT_TYPE):
    delete_old_past_abonements()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã

async def test_notify(update, context):
    await notify_about_ending_abonements(context)

async def notify_about_ending_abonements(context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    today = datetime.now().strftime("%Y-%m-%d")

    # –ò—â–µ–º –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    cursor.execute('''
        SELECT * FROM abonements 
        WHERE notification_date = ? AND status = 'active'
    ''', (today,))

    abonements = cursor.fetchall()
    conn.close()

    for abonement in abonements:
        end_date = datetime.strptime(abonement["end_date"], "%Y-%m-%d")
        user_end_date = end_date.strftime("%d.%m.%Y")

        try:
            await context.bot.send_message(
                chat_id=abonement["user_id"],
                text=(
                "üò± –°—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! üò±\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.\n\n"
                
                "üìã –î–µ—Ç–∞–ª–∏:\n"
                f"üÜî ID: `{abonement['id']}`\n"
                f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {abonement['abonement']}\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user_end_date}\n\n"
                
                "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåü"
                )
            )

            # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE abonements 
                SET notification_date = NULL 
                WHERE id = ?
            ''', (abonement['id'],))
            conn.commit()
            conn.close()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {abonement['id']}: {e}")

async def check_and_expire_abonements(context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ë–î
    today = datetime.now().strftime("%Y-%m-%d")

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Å –∏—Å—Ç–µ–∫—à–µ–π –¥–∞—Ç–æ–π
    cursor.execute('''
        SELECT * FROM abonements 
        WHERE status = 'active' AND end_date <= ?
    ''', (today,))

    expired_abonements = cursor.fetchall()
    conn.close()

    for abonement in expired_abonements:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        update_abonement_status(abonement['id'], 'past')

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await context.bot.send_message(
            chat_id=SUPERGROUP_ID,
            text=(
                f"üö® –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                f"üÜî ID: {abonement['id']}\n"
                f"üôç‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{abonement['username']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {abonement['phone']}\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {abonement['end_date']}"
            )
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=abonement['user_id'],
                text=(
                    "üîî *–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω* üîî\n\n"
                    f"üÜî ID: `{abonement['id']}`\n"
                    f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.strptime(abonement['end_date'], '%Y-%m-%d').strftime('%d.%m.%Y')}\n\n"
                    "*–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å –Ω–∞–º–∏! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –º—ã –≤—Å–µ–≥–¥–∞ –í–∞—Å –∂–¥–µ–º*‚ù§Ô∏è\n"
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {abonement['id']}: {e}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# üì∏ 1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø–æ—Ä—Ç–∑–∞–ª–∞
async def sport_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö –ø–æ file_id
    photo_file_id = "AgACAgIAAxkBAAIpo2eYqRvw0nZbuRN2WZiApQRxUcXNAAJu6jEbmzDISPJlJGZsSqmJAQADAgADeQADNgQ"
    await context.bot.send_photo(chat_id=chat_id, photo=photo_file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_abonement")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_sport_menu")],
    ]
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±—Ä–∞–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )



# üîô 2. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_menu_sport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–§–∏—Ç–Ω–µ—Å –∫–ª—É–±", callback_data="sport"),
         InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="manager")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="book_room")],
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await query.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BelonLife!",
        reply_markup=reply_markup
    )


# üìù 3. –í–≤–æ–¥ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
async def continue_abonement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.message.edit_text(
            "–ö–∞–∫–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –í—ã –≤—ã–±—Ä–∞–ª–∏?\n\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã, –≤–∑—Ä–æ—Å–ª—ã–π, 6 –º–µ—Å—è—Ü–µ–≤"
        )
    return GET_ABONEMENT

# üéüÔ∏è 4. –í–≤–æ–¥ –∏–º–µ–Ω–∏
async def get_abonement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    abonement = update.message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    if len(abonement) > 100:
        await update.message.reply_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return GET_ABONEMENT  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ user_data
    context.user_data['abonement'] = abonement
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
    return GET_NAME

# üôç 5. –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    if len(name) > 25:
        await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–µ –±–æ–ª–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤:")
        return GET_NAME
    context.user_data['name'] = name
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return GET_PHONE

# üì± 6. –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    phone_pattern = r"^[\d\-\+\(\)]{1,20}$"

    if not re.match(phone_pattern, phone):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return GET_PHONE

    context.user_data['phone'] = phone

    # –ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º —Å–ø–æ—Å–æ–±–µ —Å–≤—è–∑–∏
    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", callback_data="contact_write")],
        [InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="contact_call")],
        [InlineKeyboardButton("–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", callback_data="contact_any")],
    ]

    await update.message.reply_text(
        "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return GET_PREFER_CONTACT

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
async def get_prefer_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
    contact_preference_map = {
        "contact_write": "–ù–∞–ø–∏—Å–∞—Ç—å",
        "contact_call": "–ü–æ–∑–≤–æ–Ω–∏—Ç—å",
        "contact_any": "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã",
    }
    context.user_data['prefer_contact'] = contact_preference_map[query.data]

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    text, keyboard = create_confirmation_message(context)

    await query.edit_message_text(
        text=text,
        reply_markup=keyboard,
        disable_web_page_preview=True,
        parse_mode='HTML'
    )
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_confirmation_message(context):
    abonement = context.user_data['abonement']
    name = context.user_data['name']
    phone = context.user_data['phone']
    prefer_contact = context.user_data.get('prefer_contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    text = (
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {abonement}\n"
        f"üôç‚Äç‚ôÇÔ∏è –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üì© –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {prefer_contact}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–∂–∏–º–∞—è '–î–∞', –í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ <a href='https://docs.google.com/document/d/1n1dVFcS-LrDqbYqkWdWlvWfoUPStZTeQ_Dwcm33HP_c/edit?usp=sharing'>–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>"
    )

    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="confirm_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_no")],
    ]

    return text, InlineKeyboardMarkup(keyboard)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_booking_id_exists(abonement_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM abonements WHERE id = ?', (abonement_id,))
    exists = cursor.fetchone() is not None
    conn.close()
    return exists

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å
def generate_booking_id():
    while True:
        letter = random.choice(string.ascii_uppercase)  # –û–¥–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
        digits = ''.join(random.choices(string.digits, k=5))  # –ü—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä
        abonement_id = f"{letter}{digits}"  # –ü—Ä–∏–º–µ—Ä: A12345

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not is_booking_id_exists(abonement_id):
            return abonement_id  # –ï—Å–ª–∏ ID –Ω–µ –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
def calculate_end_date(duration: str):
    current_time = datetime.now()
    # –û—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç datetime
    if duration.endswith('m'):
        months = int(duration[:-1])
        return current_time + relativedelta(months=+months)
    elif duration.endswith('w'):
        weeks = int(duration[:-1])
        return datetime.now() + timedelta(weeks=weeks)
    elif duration.endswith('d'):
        days = int(duration[:-1])
        return datetime.now() + timedelta(days=days)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_chat.id
    username = update.effective_user.username if update.effective_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"

    if query.data == "confirm_yes":
        abonement = context.user_data['abonement']
        name = context.user_data['name']
        phone = context.user_data['phone']
        prefer_contact = context.user_data.get('prefer_contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        abonement_id = generate_booking_id()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏)
        add_abonement(abonement_id, user_id, username, name, phone, abonement, 'waiting')

        text = (
            f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n"
            f"üÜî ID: {abonement_id}\n"
            f"üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {abonement}\n\n"
            f"üëæ Username: @{username}\n"
            f"üôç‚Äç‚ôÇÔ∏è –ò–º—è: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üì© –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {prefer_contact}\n\n"
            f"–ü—Ä–∏–Ω—è—Ç—å: /accept {abonement_id}"
        )

        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á –ø–æ—Å–ª–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        del context.user_data['prefer_contact']

        await context.bot.send_message(chat_id=SUPERGROUP_ID, text=text)
        await query.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
        await query.message.edit_text(
            f"üÜî ID: {abonement_id}\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚úÖ \n\n(–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í–∞–º –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.)"
        )

        context.user_data.clear()
        return ConversationHandler.END
    elif query.data == "confirm_no":
        await query.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

        await back_to_menu_sport(update, context)

        context.user_data.clear()

        return ConversationHandler.END


# üì≤ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
async def accept_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    try:
        booking_id = context.args[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        abonement = get_abonement_by_id(booking_id)
        if not abonement:
            await update.message.reply_text(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        update_abonement_status(booking_id, 'not_active')

        await update.message.reply_text(
            f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç {booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö."
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = abonement['user_id']
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚úÖ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!\n"
                f"üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {booking_id}\n"
                f"üí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {abonement['abonement']}\n"
                f"üôç‚Äç‚ôÇÔ∏è –ò–º—è: {abonement['name']}\n\n"
                f"üìå –î–µ–ª–æ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞ –º–∞–ª—ã–º! –ü–æ–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ –∫–∞—Å—Å–µ."
            )
        )
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /accept {ID}")


async def activate_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(context.args) < 2:
            raise IndexError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

        booking_id = context.args[0]
        duration = context.args[1].lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if not re.match(r"^\d+[dwm]$", duration):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        abonement = get_abonement_by_id(booking_id)
        if not abonement:
            await update.message.reply_text(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if abonement['status'] != 'not_active':
            await update.message.reply_text(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {booking_id} –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'.")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        try:
            end_date = calculate_end_date(duration)
        except ValueError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
        notification_date = end_date - timedelta(days=1)
        notification_date_str = notification_date.date().isoformat()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        end_date_str = end_date.date().isoformat()
        start_date_str = datetime.now().date().isoformat()

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        conn = None
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE abonements 
                SET status = 'active', 
                    start_date = ?, 
                    end_date = ?,
                    notification_date = ? 
                WHERE id = ?
            ''', (start_date_str, end_date_str, notification_date_str, booking_id))
            conn.commit()
        except sqlite3.Error as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return
        finally:
            if conn:
                conn.close()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=abonement['user_id'],
            text=(
                f"üéâ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç (ID: {booking_id}) —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω!\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%d.%m.%Y')}\n\n"
                f"–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™"
            )
        )
        await update.message.reply_text(f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç {booking_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

    except IndexError:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /active {ID} {d|w|m}\n–ü—Ä–∏–º–µ—Ä: /active ABC123 30d")
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ + d/w/m \n1d - 1 –¥–µ–Ω—å\n1w - 1 –Ω–µ–¥–µ–ª—è\n1m - 1 –º–µ—Å—è—Ü")


# üìã –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async def show_waiting_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    abonements = get_abonements_by_status('waiting')

    if not abonements:
        await update.message.reply_text("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return

    booking_list = "üìã **–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:**\n\n"
    for abonement in abonements:
        booking_list += (
            f"üÜî **ID:** {abonement['id']}\n"
            f"üôç‚Äç‚ôÇÔ∏è **–ò–º—è:** {abonement['name']}\n"
            f"üí≥ **–ê–±–æ–Ω–µ–º–µ–Ω—Ç:** {abonement['abonement']}\n"
            f"üëæ **Username:** @{abonement['username']}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {abonement['phone']}\n\n\n"
        )

    await update.message.reply_text(booking_list, parse_mode="Markdown")


# üìã –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async def show_not_active_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    abonements = get_abonements_by_status('not_active')

    if not abonements:
        await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    booking_list = "üìã **–°–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:**\n\n"
    for abonement in abonements:
        booking_list += (
            f"üÜî **ID:** {abonement['id']}\n"
            f"üôç‚Äç‚ôÇÔ∏è **–ò–º—è:** {abonement['name']}\n"
            f"üí≥ **–ê–±–æ–Ω–µ–º–µ–Ω—Ç:** {abonement['abonement']}\n"
            f"üëæ **Username:** @{abonement['username']}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {abonement['phone']}\n\n\n"
        )

    await update.message.reply_text(booking_list, parse_mode="Markdown")


# üìã –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async def show_active_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    abonements = get_abonements_by_status('active')

    if not abonements:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    booking_list = "üìã **–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:**\n\n"
    for abonement in abonements:
        booking_list += (
            f"üÜî **ID:** {abonement['id']}\n"
            f"üôç‚Äç‚ôÇÔ∏è **–ò–º—è:** {abonement['name']}\n"
            f"üí≥ **–ê–±–æ–Ω–µ–º–µ–Ω—Ç:** {abonement['abonement']}\n"
            f"üëæ **Username:** @{abonement['username']}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {abonement['phone']}\n"
            f"üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {abonement['start_date']}\n"
            f"üìÖ **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {abonement['end_date']}\n\n\n"
        )

    await update.message.reply_text(booking_list, parse_mode="Markdown")


# üìã –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø—Ä–æ—à–µ–¥—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
async def show_past_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    abonements = get_abonements_by_status('past')

    if not abonements:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    booking_list = "üìã **–°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:**\n\n"
    for abonement in abonements:
        booking_list += (
            f"üÜî **ID:** {abonement['id']}\n"
            f"üôç‚Äç‚ôÇÔ∏è **–ò–º—è:** {abonement['name']}\n"
            f"üí≥ **–ê–±–æ–Ω–µ–º–µ–Ω—Ç:** {abonement['abonement']}\n"
            f"üëæ **Username:** @{abonement['username']}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {abonement['phone']}\n"
            f"üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {abonement['start_date']}\n"
            f"üìÖ **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {abonement['end_date']}\n\n\n"
        )

    await update.message.reply_text(booking_list, parse_mode="Markdown")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
async def end_abonement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    try:
        abonement_id = context.args[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        abonement = get_abonement_by_id(abonement_id)
        if not abonement or abonement['status'] != 'active':
            await update.message.reply_text(f"‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {abonement_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "past"
        update_abonement_status(abonement_id, 'past')

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await update.message.reply_text(f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {abonement_id} –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = abonement['user_id']
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚ö†Ô∏è –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç (ID: {abonement_id}) –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Å–ø–æ—Ä—Ç–∑–∞–ª–∞."
            )
        )
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /endabon {ID}")

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é
async def delete_abonement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    try:
        abonement_id = context.args[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        abonement = get_abonement_by_id(abonement_id)
        if not abonement:
            await update.message.reply_text(f"‚ùå –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {abonement_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM abonements WHERE id = ?', (abonement_id,))
        conn.commit()
        conn.close()

        await update.message.reply_text(f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {abonement_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /deleteabon {ID}")

# üìã –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def help_abon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    commands = (
        "üìú <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/accept {ID} - <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö.</b>\n"
        "/active {ID} {–¥–∞—Ç–∞} - <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö.</b>\n\n"
        "/waitbooks - <b>–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.</b>\n"
        "/notactivebooks - <b>–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.</b>\n"
        "/activebooks - <b>–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.</b>\n"
        "/pastbooks - <b>–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.</b>\n\n"
        "/endabon {ID} - <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö.</b>\n"
        "/deleteabon {ID} - <b>–£–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç.</b>\n\n"
        "/allmessage {—Å–æ–æ–±—â–µ–Ω–∏–µ} - <b>–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∏–º–µ–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç</b>"
    )

    await update.message.reply_text(commands, parse_mode="HTML")

# —Å–æ–±—Ä–∞—Ç—å id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
def get_all_users():
    conn = get_db_connection()
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ï user_id
    cursor.execute('SELECT DISTINCT user_id FROM abonements WHERE user_id IS NOT NULL')
    users = cursor.fetchall()
    conn.close()
    return [user['user_id'] for user in users]

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è /allmessage
async def broadcast_message(update, context):
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    if len(context.args) == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /allmessage –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!")
        return

    message_text = ' '.join(context.args)
    user_ids = get_all_users()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    unique_users = list(set(user_ids))

    success_count = 0
    errors = []

    for user_id in unique_users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            success_count += 1
        except Exception as e:
            errors.append(str(e))
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    report = (
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"–û—à–∏–±–∫–∏: {len(errors)}\n"
        f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(unique_users)}"
    )

    await update.message.reply_text(report)

# PING FOR PYTHONANYWHERE
async def keep_alive(context: ContextTypes.DEFAULT_TYPE):
    print("–ü–∏–Ω–≥: –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∏–Ω–≥–∞ –≤ –≥—Ä—É–ø–ø—É (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)
async def ping_group(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=SUPERGROUP_ID, text="–ü–∏–Ω–≥: –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!")