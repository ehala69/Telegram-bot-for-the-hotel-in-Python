from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import CallbackContext, ContextTypes, ConversationHandler
from config import CATEGORY_DATA, ROOM_DATA, SUPERGROUP_ID

import re
import asyncio

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, CHECK_IN, CHECK_OUT, PERSONS, CONTACT_PREF, CONFIRM = range(7)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def is_valid_number(text: str) -> bool:
    return bool(re.match(r'^[0-9+]+$', text))

# –ö–û–ú–ê–ù–î–´

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /book
async def book_room_by_manager(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –≥—Ä—É–ø–ø–µ.")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    try:
        args = context.args
        room_id, start_date, end_date = args[0], args[1], args[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in ROOM_DATA:
            await update.message.reply_text(f"–ù–æ–º–µ—Ä —Å ID {room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞
        current_description = ROOM_DATA[room_id]["description"]
        updated_description = re.sub(
            r"–°—Ç–∞—Ç—É—Å: .*$",
            f"–°—Ç–∞—Ç—É—Å: –ù–æ–º–µ—Ä –∑–∞–Ω—è—Ç —Å {start_date} –ø–æ {end_date} —á–∏—Å–ª–æ ‚ùå",
            current_description,
            flags=re.MULTILINE
        )
        ROOM_DATA[room_id]["description"] = updated_description
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ {room_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /book {–∞–π–¥–∏ –Ω–æ–º–µ—Ä–∞} {—Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞} {–¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞}.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /book 02 21.12 25.12"
        )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
async def check_room_status(update: Update, context: CallbackContext):
    try:
        room_id = context.args[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        if update.effective_chat.id != int(SUPERGROUP_ID):
            await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –≥—Ä—É–ø–ø–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in ROOM_DATA:
            await update.message.reply_text(f"–ù–æ–º–µ—Ä —Å ID {room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
        description = ROOM_DATA[room_id]["description"]
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ {room_id}: {description}")
    except IndexError:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /status {–∞–π–¥–∏ –Ω–æ–º–µ—Ä–∞}.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /status all
async def statusall(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –≥—Ä—É–ø–ø–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤
    status_message = "–°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤:\n\n"
    for room_id, room_data in ROOM_DATA.items():
        status = room_data["description"]  # –°—Ç–∞—Ç—É—Å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        status_message += f"{status}\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await update.message.reply_text(status_message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /unbook
async def unbook_room_by_manager(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –≥—Ä—É–ø–ø–µ.")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        room_id = context.args[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in ROOM_DATA:
            await update.message.reply_text(f"–ù–æ–º–µ—Ä —Å ID {room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞
        current_description = ROOM_DATA[room_id]["description"]
        updated_description = re.sub(
            r"–°—Ç–∞—Ç—É—Å: .*$",
            "–°—Ç–∞—Ç—É—Å: –ù–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω ‚úÖ",
            current_description,
            flags=re.MULTILINE
        )
        ROOM_DATA[room_id]["description"] = updated_description
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ {room_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '–ù–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω'.")
    except IndexError:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unbook {–∞–π–¥–∏ –Ω–æ–º–µ—Ä–∞}.\n–ü—Ä–∏–º–µ—Ä: /unbook 02")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–æ–º–µ—Ä–∞
async def set_room_price(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        room_id, new_price = args[0], args[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if room_id not in ROOM_DATA:
            await update.message.reply_text(f"–ù–æ–º–µ—Ä —Å ID {room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        if not new_price.isdigit():
            await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /price 02 28000")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
        current_description = ROOM_DATA[room_id]["description"]
        updated_description = re.sub(
            r"–¶–µ–Ω–∞: \d+—Ç–≥",
            f"–¶–µ–Ω–∞: {new_price}—Ç–≥",
            current_description
        )
        ROOM_DATA[room_id]["description"] = updated_description

        await update.message.reply_text(f"–¶–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ {room_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price}—Ç–≥.")
    except (IndexError, ValueError):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /price {–∞–π–¥–∏ –Ω–æ–º–µ—Ä–∞} {–Ω–æ–≤–∞—è —Ü–µ–Ω–∞}.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /price 02 28000"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def show_help(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
    if update.effective_chat.id != int(SUPERGROUP_ID):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    help_text = (
        "üìú <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/book {ID} {—Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞} {–¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞} - <b>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä</b>\n"
        "/unbook {ID} - <b>–û—Å–≤–æ–±–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä</b>\n"
        "/status {ID} - <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞</b>\n"
        "/statusall - <b>–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤</b>\n"
        "/price {ID} {—Ü–µ–Ω–∞} - <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –Ω–æ–º–µ—Ä–∞</b>\n"
        "/helpabon - <b>–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (—Ñ–∏—Ç–Ω–µ—Å)</b>\n"
    )

    await update.message.reply_text(help_text, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–§–∏—Ç–Ω–µ—Å –∫–ª—É–±", callback_data="sport"),
         InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="manager")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="book_room")],
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BelonLife!",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BelonLife!",
            reply_markup=reply_markup
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω–µ–¥–∂–µ—Ä"
async def manager(update: Update, context):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await query.message.edit_text(
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b> \n+7-747-415-85-75 - —Å–æ—Ç–æ–≤—ã–π\n+7-7172-56-20-20 - –≥–æ—Ä–æ–¥—Å–∫–æ–π",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
async def faq(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    long_text = (
        "1Ô∏è‚É£ <b>–ê–¥—Ä–µ—Å:</b> \n<a href='https://go.2gis.com/Y3Gsl'>–ø—Ä–æ—Å–ø. –ê–±—ã–ª–∞–π –•–∞–Ω–∞, 24/1</a>\n\n"
        "2Ô∏è‚É£ <b>–†–∞–±–æ—á–∏–µ –Ω–æ–º–µ—Ä–∞:</b>\n+7-747-415-85-75 - —Å–æ—Ç–æ–≤—ã–π\n+7-7172-56-20-20 - –≥–æ—Ä–æ–¥—Å–∫–æ–π \n\n"
        "3Ô∏è‚É£ <b>–°–∞–π—Ç:</b> belon.kz\n\n"
        "4Ô∏è‚É£ –ó–∞–µ–∑–¥ –ø–æ—Å–ª–µ <b>14:00</b>, –≤—ã–µ–∑–¥ –¥–æ <b>12:00</b>\n\n"
        "5Ô∏è‚É£ <b>–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –æ—Ç–µ–ª—è –µ—Å—Ç—å:</b> \nüõú –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π Wi-Fi \nüèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª \nüèä –ë–∞—Å—Å–µ–π–Ω \nüßñ C–∞—É–Ω–∞ \nüöó –ü–∞—Ä–∫–æ–≤–∫–∞ \nüç∑ –†–µ—Å—Ç–æ—Ä–∞–Ω \nüß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è \n‚ùÑÔ∏è –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –≤ –Ω–æ–º–µ—Ä–µ\n\n"
        "6Ô∏è‚É£ <b>–û—Ç–∑—ã–≤—ã:</b>\n<a href='https://yandex.kz/profile/-/CHUyZL9S'>–Ø–Ω–¥–µ–∫—Å.–∫–∞—Ä—Ç—ã: </a>4,6/5\n<a href='https://go.2gis.com/TgofV'>2GIS: </a>4,4/5\n\n"
        "7Ô∏è‚É£ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b> \n1) –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.\n\n"
        "2) –ú–æ–∂–Ω–æ –ª–∏ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏?\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n\n3) –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏/—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞?\n–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä.\n\n"
        "4) –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è?\n–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n\n5) –ö–∞–∫–æ–≤—ã —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã?\n–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏."
    )

    await query.message.edit_text(
        long_text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"
async def book_room(update: Update, context):
    query = update.callback_query
    await query.answer()
    await menu(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    reply_markup = create_category_keyboard()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        try:
            await query.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_key = query.data.split("_")[1]
        category = CATEGORY_DATA.get(category_key)

        if not category:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ `context.user_data`
        context.user_data["room_indices"] = category["rooms"]
        context.user_data["current_room"] = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        first_room_index = category["rooms"][0]
        context.user_data["previous_messages"] = await send_room_photos(
            query.message.chat_id, first_room_index, context
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def create_category_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(f"–≤ —Å—É—Ç–∫–∏ –æ—Ç {data['price']}", callback_data=f"category_{key}")
        ] for key, data in CATEGORY_DATA.items()
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])

    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–§–∏—Ç–Ω–µ—Å –∫–ª—É–±", callback_data="sport"),
         InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="manager")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="book_room")],
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BelonLife!",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def back_to_categories(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    previous_messages = context.user_data.get('previous_messages', [])
    for msg_id in previous_messages:
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = create_category_keyboard()
    sent_message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ user_data
    context.user_data['previous_messages'] = [sent_message.message_id]
    context.user_data['start_message_id'] = sent_message.message_id  # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º start_message_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–æ–º–µ—Ä–æ–≤
def create_room_keyboard(room_index):
    keyboard = [
        [
            InlineKeyboardButton("<", callback_data=f"prev_{room_index}"),
            InlineKeyboardButton(">", callback_data=f"next_{room_index}"),
        ],
        [
            InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"select_{room_index}"),
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ file_id
async def send_room_photos(chat_id, room_index, context, previous_messages=None):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if previous_messages:
        for msg_id in previous_messages:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 100 –º—Å
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    room_data = ROOM_DATA[room_index]
    photo_ids = room_data["photos"]  # –ó–¥–µ—Å—å —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å file_id –¥–ª—è —Ñ–æ—Ç–æ
    description = room_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.")

    # –°–æ–∑–¥–∞—ë–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    media_group = []
    for i, file_id in enumerate(photo_ids):
        if i == 0:
            media_group.append(InputMediaPhoto(file_id, caption=description))
        else:
            media_group.append(InputMediaPhoto(file_id))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    sent_media = await context.bot.send_media_group(chat_id=chat_id, media=media_group)

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await asyncio.sleep(0.1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    sent_buttons = await context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_room_keyboard(room_index),
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º IDs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return [msg.message_id for msg in sent_media] + [sent_buttons.message_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data = query.data.split("_")
        action = data[0]
        room_index = data[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏

        if action == "select":
            # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await query.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä {room_index}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['selected_room'] = room_index

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            return NAME  # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "prev" –∏ "next" (–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤)
        if action == "prev":
            context.user_data["current_room"] = (context.user_data["current_room"] - 1) % len(context.user_data["room_indices"])
        elif action == "next":
            context.user_data["current_room"] = (context.user_data["current_room"] + 1) % len(context.user_data["room_indices"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–æ–º–µ—Ä–∞
        new_room_index = context.user_data["room_indices"][context.user_data["current_room"]]
        context.user_data["previous_messages"] = await send_room_photos(
            query.message.chat_id, new_room_index, context, context.user_data.get("previous_messages", [])
        )


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞
async def ask_name(update: Update, context):
    if len(update.message.text) > 30:
        await update.message.reply_text(
            "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–Ω–æ–≤–∞:"
        )
        return NAME

    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {context.user_data['name']}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    return PHONE

async def ask_phone(update: Update, context):
    if len(update.message.text) > 40:
        await update.message.reply_text(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 45 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞:"
        )
        return PHONE

    if not is_valid_number(update.message.text):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏ –±—É–∫–≤—ã. "
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )
        return PHONE

    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞—Å–µ–ª—è—Ç—å—Å—è –≤ –æ—Ç–µ–ª—å?")
    return CHECK_IN

async def ask_check_in(update: Update, context):
    if len(update.message.text) > 45:
        await update.message.reply_text(
            "–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 45 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–Ω–æ–≤–∞:"
        )
        return CHECK_IN

    context.user_data['check_in'] = update.message.text
    await update.message.reply_text("–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–±—ã—Ç—å –≤ –æ—Ç–µ–ª–µ?")
    return CHECK_OUT

async def ask_check_out(update: Update, context):
    if len(update.message.text) > 45:
        await update.message.reply_text(
            "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 45 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–Ω–æ–≤–∞:"
        )
        return CHECK_OUT

    context.user_data['check_out'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥—É—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å? –ë—É–¥—É—Ç –ª–∏ –¥–µ—Ç–∏? (–¥–æ 14 –ª–µ—Ç)")
    return PERSONS

async def ask_persons(update: Update, context):
    if re.search(r'666|52|777', (update.message.text or '')):
        await update.message.reply_text("ü§°")
    if len(update.message.text) > 45:
        await update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 45 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞:"
        )
        return PERSONS

    context.user_data['persons'] = update.message.text

    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", callback_data='write')],
        [InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data='call')],
        [InlineKeyboardButton("–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", callback_data='any')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å?",
        reply_markup=reply_markup
    )
    return CONTACT_PREF

async def ask_contact_pref(update: Update, context):
    query = update.callback_query
    if query:
        contact_methods = {
            'write': '–ù–∞–ø–∏—Å–∞—Ç—å',
            'call': '–ü–æ–∑–≤–æ–Ω–∏—Ç—å',
            'any': '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã'
        }
        context.user_data['contact_pref'] = contact_methods[query.data]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
        booking_info = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üõèÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {context.user_data['selected_room']}\n\n"
            f"üôç‚Äç‚ôÇÔ∏è –ò–º—è: {context.user_data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {context.user_data['persons']}\n"
            f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {context.user_data['contact_pref']}\n\n"
            f"–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è: {context.user_data['check_in']}\n"
            f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {context.user_data['check_out']}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–∂–∏–º–∞—è '–î–∞', –í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ "
            "<a href='https://docs.google.com/document/d/1n1dVFcS-LrDqbYqkWdWlvWfoUPStZTeQ_Dwcm33HP_c/edit?usp=sharing'>–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data='confirm_yes')],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data='confirm_no')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.edit_text(
            booking_info,
            reply_markup=reply_markup,
            parse_mode='HTML',
            disable_web_page_preview=True
        )

        return CONFIRM

async def confirm_booking(update: Update, context):
    query = update.callback_query
    if query:
        if query.data == "confirm_yes":
            username = update.effective_user.username if update.effective_user and update.effective_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
            booking_info = (
                f"‚ùó–ù–æ–≤–∞—è –±—Ä–æ–Ω—å‚ùó\n"
                f"üõèÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {context.user_data['selected_room']}\n\n"
                f"üëæ Username: @{username}\n"
                f"üôç‚Äç‚ôÇÔ∏è –ò–º—è: {context.user_data['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {context.user_data['persons']}\n"
                f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {context.user_data['contact_pref']}\n\n"
                f"–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è: {context.user_data['check_in']}\n"
                f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {context.user_data['check_out']}\n"
                f"–ö–æ–º–∞–Ω–¥–∞: /book {context.user_data['selected_room']} (–¥–∞—Ç–∞ –≤—ä–µ–∑–¥–∞) (–¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞)"
            )

            if query.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ

                # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                await query.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await context.bot.send_message(SUPERGROUP_ID, booking_info)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await start(update, context)

        elif query.data == "confirm_no":
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
            context.user_data.clear()
            if query.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ

                # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                await query.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await start(update, context)

    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
async def cancel(update: Update, context):
    pass